-  What happens when you initialize a repository? Why do you need to do it?

Initializing a repository converts the folder into a git repository with .git file containing the metadata regarding the folder.

- How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area consists of files that are ready to be committed. While working area consists of files that we may or may not change but are part of our folder and repository is collection of committed files.

- How can you use the staging area to make sure you have one commit per logical change?

Multiple logical change would be part of a single commit if we use commit after making changes in multiple files. Other option would be to commit after each logical change to a single file. But staging area gives an option to make changes across multiple file and commit sequentially according to the logic involved.


- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

There could be instances when the user would like to take an alternate route to do some experiment or make a different version of code. In such cases branches could be used to switch between different versions while being assured that one always has a master version to its rescue.

- How do the diagrams help you visualize the branch structure?

The diagram shows where the head lies and at which points did we branch out to make new versions. Hence facilitating the task of moving in and out of various branches.


git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
